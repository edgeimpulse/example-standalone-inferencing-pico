/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 28.10.2022 21:53:19

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 320;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[11];
TfLiteEvalTensor tflEvalTensors[11];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[4];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,84 } };
const TfArray<1, float> quant0_scale = { 1, { 0.1986280083656311, } };
const TfArray<1, int> quant0_zero = { 1, { -97 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int8_t tensor_data1[20*84] = {
  -92, -86, -75, 14, -21, 11, -105, -92, -101, 19, 114, -61, -85, 109, 52, 123, 114, -41, 84, -79, 108, -113, 117, -90, -71, -72, -113, 52, -48, -43, -78, -111, 23, 110, 38, -52, -65, 85, 36, -11, 85, 121, 83, 65, -101, 36, -29, 60, -56, 20, 61, 99, -103, 98, 16, 27, 15, -24, -17, 3, 13, -32, -63, -33, -58, -33, 61, 58, -3, -94, 107, -73, -11, 10, -23, 116, 74, 93, -9, 74, 82, 57, 16, 82,
  17, 29, 2, -48, 26, 117, 80, 102, -101, 82, 66, -59, -26, -106, -70, -50, -46, -104, 86, 56, -8, -68, -99, -70, 40, -70, 32, 60, -66, 7, 100, 114, -120, -21, -113, 109, -40, 69, 87, -60, -63, 23, 26, 5, -102, -116, 32, -6, -22, -68, 78, 124, -113, -59, 114, -19, -110, 123, -24, -93, 106, 10, -69, 76, -42, -62, 44, -83, 74, -29, -125, 64, -32, -69, 66, 14, -95, -110, 71, -113, 96, -72, -106, -123,
  -2, -124, -99, 53, 0, 27, -120, -29, -79, 12, -42, -31, -92, -28, 65, -105, -86, -29, 104, -121, 83, -18, -62, 24, -56, 104, 13, -65, -21, -76, -82, 94, -109, 49, -84, 41, 29, -18, -61, -79, 101, -23, -5, -11, -31, 14, 88, -32, 125, -98, 115, -4, 22, -87, 79, 63, 75, 32, 37, 93, 45, -121, -110, 42, 57, -93, -60, 9, 66, 112, 90, 53, -47, 120, -42, 72, -87, -31, -93, -31, 29, -59, -90, 39,
  -123, -34, -100, 53, 34, 36, -88, 19, 19, 106, 0, -109, 20, 55, 10, -62, -34, -26, 118, 73, -125, -79, 126, -11, -18, 114, 9, -42, 94, 22, -1, 93, 9, -103, -29, 94, 30, -25, -93, 5, 7, -23, -30, 68, -94, -78, 93, -94, 70, 76, 105, -72, -49, 112, -115, -73, 66, 2, 80, -85, -115, -68, -27, 79, -69, 36, -39, -124, -119, 45, 58, -45, -1, -75, 16, -91, -107, 49, -61, 71, 72, -71, -69, 14,
  0, 69, -76, 79, 40, 111, -96, -49, 23, 38, 40, 4, -8, -25, -107, -6, -62, -55, 29, 22, 19, -50, -48, 27, -14, -58, 108, 50, 114, -2, 7, -66, -62, 69, -64, -47, 70, 63, -92, -65, 52, -101, -83, -34, -117, -6, 104, 94, 66, 41, 53, -114, 23, -69, 81, -27, 74, -97, 52, 36, -88, 26, -42, -73, 119, -9, 21, -81, -25, -120, -50, -9, -16, 27, 28, 46, 39, 31, -11, 115, -29, 61, 72, -75,
  64, -70, -23, -21, -3, 47, 31, 42, -3, -103, -61, -76, 115, -60, 93, 24, -63, 44, 83, 106, -60, -117, -24, -40, -84, 58, 22, -49, 69, 42, 58, 118, 5, 113, -35, 78, -13, 35, 123, -67, -4, 32, 108, 69, -35, 78, -116, 76, -19, -11, -21, 6, -40, -54, -21, 78, 34, -47, 80, 12, -27, 0, 103, 7, 27, -1, 79, 51, 22, -92, -120, -52, -62, -116, -63, -114, 31, 125, 45, 56, -110, 30, 34, 4,
  -93, 113, -15, -46, -49, 37, 37, -28, -58, 68, -103, -94, -124, -89, 109, 30, -25, 59, 33, -44, 24, -15, 115, -94, 32, 3, -61, 21, 32, -34, 56, -37, -79, -10, -44, -53, 28, 87, 12, -48, 99, 4, -108, -67, -18, -5, 91, 107, 67, 56, 45, 16, 85, -44, -118, 61, -70, 56, 9, 19, 48, -34, 19, -40, -52, -106, 40, -34, -57, -16, -112, 66, -21, 54, -49, -69, 30, 36, 99, 27, 59, 18, -42, 3,
  -41, 122, -84, -30, -103, 116, 19, -115, 100, -97, 79, -67, -90, -55, -69, -12, -2, -99, 7, -35, -38, -100, -120, -24, -19, -108, 87, 39, 46, 88, -110, 104, -111, -64, 14, 40, -122, 28, 54, 43, 14, -113, 79, -82, -82, 94, 54, 98, 27, 3, 113, 40, -57, 114, 49, 14, 1, 110, -40, -73, -19, 63, 37, 94, -111, 40, 51, -85, 78, -74, -117, 106, -41, 119, 43, 60, 19, 8, 100, 97, 89, 108, -14, -10,
  39, 51, 46, -120, 77, 58, -40, -24, 52, -98, -123, 119, 9, -49, -126, -77, 22, -22, 90, -1, -15, -36, -23, -66, -53, 111, -107, 29, 99, -2, -44, 46, -55, 50, 87, 38, -19, 14, -106, 31, 62, -103, -87, 83, -35, 7, 97, 61, -87, 106, -125, -93, 27, -87, -37, 0, -105, 44, 73, 36, -21, 92, -66, 124, 107, 110, -124, 18, 5, -126, 48, -83, 56, 122, -88, 114, 53, 67, 104, -18, -58, -31, 85, -43,
  -5, 25, 12, 60, -109, -5, -9, -48, 62, -21, 5, -39, -60, -6, 11, -52, 34, 110, 101, -100, 80, -79, -9, 105, 96, -92, -42, -78, 109, 72, -96, 37, -5, -92, -18, 106, -15, 93, -5, 91, -88, -54, 65, 72, 37, -98, 82, -12, -39, 89, -32, 124, -74, 122, 88, -118, -96, -49, 68, 35, -72, -44, 118, -81, 112, 105, 116, -69, 91, 52, 14, -52, -64, 23, 51, 2, 82, 83, 53, -79, -1, -98, -48, 36,
  -100, -103, -118, -94, 117, -42, 41, -4, 18, 85, 10, 107, 24, 104, -14, -91, -78, 76, -39, -13, -67, 6, 79, -112, -54, 40, -90, 71, 44, -103, 120, -22, -116, -2, 110, 46, -45, 15, -80, -12, -50, 5, 101, 109, 41, 80, 23, 76, -51, -117, 113, -59, -100, 3, 75, -79, 18, 104, -120, 115, -71, 24, 74, -109, -91, -62, 103, -32, -122, -65, -51, -19, -70, -64, 37, -58, -100, -107, 65, 81, 88, 112, -68, -103,
  103, 67, -6, -23, 13, 123, 32, 88, 96, 117, -27, 103, 15, -85, -76, 54, 17, 72, 96, 92, 63, -49, -5, 30, 88, -86, -26, 99, -79, 75, -110, 49, -83, -45, 90, -98, 100, 62, 101, -52, -51, -38, -124, -113, -107, -14, -124, 0, -5, 19, -31, -12, 102, 125, 119, -64, 98, 48, -118, 54, -32, -17, 79, 13, 11, 78, 91, -73, 45, 59, -86, -62, 2, 120, -43, 32, -81, 46, -69, -26, -96, -43, 51, 104,
  46, 85, 21, -70, 97, -41, 33, -54, -17, 115, -10, -62, -89, 103, 109, -121, 63, -7, -119, -27, -117, -24, 112, -22, -105, -15, -93, 37, 97, -53, 82, -41, -39, 104, -108, -69, -65, -15, -94, 114, -30, 28, 21, 94, -12, -52, 74, -54, -20, 51, -37, -45, -41, -97, 100, 83, 87, 2, 72, 52, -93, -73, 42, -17, -32, 77, 110, 105, 107, -101, -120, -101, 32, -11, -103, 85, 1, 37, -66, 49, 10, -12, 109, -16,
  13, 30, -37, 84, 17, -31, 60, -24, 39, 93, 120, 108, 60, -51, 5, 26, -74, -64, 35, 100, -122, -45, 52, -50, -124, 99, 68, 21, 108, -56, -124, 127, 37, 59, 86, 61, 112, -74, 70, -116, -39, -8, 82, -36, -73, 11, -68, -9, -3, 116, -80, -78, -14, -28, 81, 73, 23, 115, -114, -53, -3, 4, 120, -19, -1, 80, 42, 80, -125, 108, 97, -100, 0, 46, 114, -94, 46, 29, -42, 125, 31, -66, 68, -19,
  -73, -124, 125, -60, 58, -42, 64, 77, 11, -45, -105, -21, -102, -34, 13, -19, -67, -58, -54, -72, 28, 52, -72, 46, 72, 6, -92, -17, -51, 9, 20, -4, 89, 83, 101, -121, 31, 12, -91, -41, -1, -99, 87, -110, -46, -2, 77, -120, 88, 12, -94, 7, 73, 61, -21, -57, -45, 14, 91, 97, -123, 78, -28, -33, -117, 10, 73, 109, -92, -114, 89, -19, 99, 3, -38, 35, 100, -12, -33, -6, 60, -116, -52, 59,
  -78, 119, -39, 44, -30, 108, -76, -61, -17, 100, -74, 57, -51, -35, 122, -96, -11, 86, 78, 85, 29, -55, 30, -101, -57, -37, 75, 45, 11, 11, -116, -101, -109, 73, 80, -40, -32, 77, -6, 92, 105, -72, 98, -15, -50, 74, -115, 116, -46, 83, -15, 69, 30, 41, 25, 69, -16, -51, -19, -101, 74, -66, -94, -47, -9, 59, -69, -112, -115, -35, 101, -22, 31, -62, -50, 94, -53, -53, -89, 122, 23, 119, 79, -65,
  -95, 106, 74, 22, -5, -1, -14, -60, -15, 38, 5, -102, -72, -113, -82, 59, 86, 61, -104, -16, -60, -113, -57, 93, 78, 47, -27, 15, 123, 116, 8, -22, -11, 78, 30, 34, -11, -42, -98, 49, 34, 121, -72, -94, 54, 39, 64, 87, 118, 32, 110, 98, -22, 35, -32, 17, -104, -19, 7, -54, -54, -43, -30, 117, -29, -42, -19, 42, 7, 121, -49, -97, 81, -19, 31, -116, 100, 31, 68, 121, 61, 122, 49, -119,
  -56, 6, -119, -106, 111, -53, 20, 89, -72, 9, 10, 53, 26, -38, -21, -37, 5, -19, -65, 99, -115, -36, 71, -102, 109, -16, -89, 121, 73, 64, 73, 23, 23, 28, -112, -116, 113, 21, -103, 22, -97, 80, -96, 95, 118, 115, 78, 107, 13, -90, -52, 82, -58, 112, 118, -83, -13, -38, 48, -101, 96, -32, 82, 95, 106, -38, -45, -54, -12, 26, 92, 84, -121, -110, 60, 94, -105, -43, 78, -117, 84, -124, -53, -123,
  -85, -27, 100, 108, 75, 48, -2, -85, -35, -31, -105, -83, 93, -13, -55, 87, -50, -21, -105, -20, 79, -108, -38, 123, -79, -104, 94, -34, 24, -8, 69, 47, 101, 13, 54, 81, 53, -15, 29, 76, -44, -124, 36, -50, 118, 96, -95, 57, 66, 9, 11, -104, -89, -55, 46, -90, 17, 49, -119, 37, 12, -31, 124, -100, 93, 47, -94, 112, -89, 70, 42, -66, -8, -103, 111, -76, -70, -71, 69, -67, -94, 67, -54, -114,
  -37, 56, 85, 60, 27, -5, 1, -106, 111, 112, -31, 95, -9, -36, 103, 40, 28, -116, 36, -19, -39, 70, 109, -110, 84, 116, -3, 115, -111, -124, -119, -88, 127, 65, 40, 17, 100, -59, 65, -29, -98, -51, 116, 47, -72, 20, -16, 89, -57, -126, 107, 87, -38, -38, -44, 3, 103, -111, 19, -44, 33, -91, 35, -94, -69, 100, 118, 85, 17, -73, 93, -72, 11, -49, -106, 81, 65, 31, -35, 100, 0, 108, -24, 23,
};
const TfArray<2, int> tensor_dimension1 = { 2, { 20,84 } };
const TfArray<1, float> quant1_scale = { 1, { 0.0019015781581401825, } };
const TfArray<1, int> quant1_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const ALIGN(16) int32_t tensor_data2[20] = { 4, 2, -4, -4, -4, 4, 3, 4, 2, 4, 2, -4, -4, -4, 4, -4, -4, -4, -2, -4, };
const TfArray<1, int> tensor_dimension2 = { 1, { 20 } };
const TfArray<1, float> quant2_scale = { 1, { 0.0003777066885959357, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[10*20] = {
  -79, -4, 35, 21, 103, -75, -33, 21, -104, -113, -39, -69, 111, 100, -35, 1, -108, 17, -37, 15,
  -80, 18, -62, 48, 30, 11, 86, -54, -45, -89, 20, -95, -29, -38, -95, -106, -51, 81, 59, -106,
  -96, 85, 30, -62, 79, -2, 52, -54, 98, 93, -72, -56, 39, -117, 39, -40, -28, 121, -109, -36,
  -81, -23, -75, -101, -18, 56, 78, 93, 108, -91, 95, 48, 2, -79, -29, 121, 26, 35, 32, -82,
  19, 8, -67, -93, -123, 106, -43, -8, -73, 121, 6, -120, -106, 44, -19, 23, 23, -111, 119, 29,
  75, 100, -98, 11, -85, -24, 4, -28, 116, -116, -127, 117, -95, 57, -62, 97, -106, -10, -106, 86,
  98, -38, 14, 96, 77, -34, 15, 57, 52, 105, -60, 72, -123, -11, -8, -10, 48, -26, 44, -56,
  -67, 110, -68, -117, -25, -20, -36, -100, 107, 82, 79, 113, -22, -6, -28, -48, -71, 20, -51, 54,
  -84, 80, 8, 57, 114, -4, 70, -119, -27, -89, 50, 90, 109, 122, -21, 58, -98, 111, -2, 4,
  -34, 39, 26, 95, -90, 73, 87, -68, 94, -43, -24, 37, -104, -41, -100, 26, 120, 114, -41, 115,
};
const TfArray<2, int> tensor_dimension3 = { 2, { 10,20 } };
const TfArray<1, float> quant3_scale = { 1, { 0.0034899176098406315, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[10] = { -10, 0, 0, 0, -5, -8, -10, 4, -10, -9, };
const TfArray<1, int> tensor_dimension4 = { 1, { 10 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0001497315097367391, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[4*10] = {
  -38, -11, 8, 56, 0, -31, -93, 13, 20, 33,
  74, -12, 103, 60, 30, 38, 86, -59, 72, 115,
  -127, -114, -85, 80, 48, 49, 23, -23, 36, -98,
  -114, 105, 68, -4, -3, -11, -16, -112, -122, 116,
};
const TfArray<2, int> tensor_dimension5 = { 2, { 4,10 } };
const TfArray<1, float> quant5_scale = { 1, { 0.0050952206365764141, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[4] = { 10, -11, 9, 11, };
const TfArray<1, int> tensor_dimension6 = { 1, { 4 } };
const TfArray<1, float> quant6_scale = { 1, { 0.0001355064450763166, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,20 } };
const TfArray<1, float> quant7_scale = { 1, { 0.042904023081064224, } };
const TfArray<1, int> quant7_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,10 } };
const TfArray<1, float> quant8_scale = { 1, { 0.026594813913106918, } };
const TfArray<1, int> quant8_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,4 } };
const TfArray<1, float> quant9_scale = { 1, { 0.033260103315114975, } };
const TfArray<1, int> quant9_zero = { 1, { -59 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,4 } };
const TfArray<1, float> quant10_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,1,2 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,3,4 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,5,6 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 84, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 1680, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant1))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 80, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 96, (TfLiteIntArray*)&tensor_dimension7, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension8, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension9, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 11;
  for (size_t i = 0; i < 11; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 4; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 4; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0,
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  10,
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 4; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
